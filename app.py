import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext
from config import BOT_TOKEN, MAX_PLAYLISTS_TO_SHOW, MIN_LISTENS
from vk_parser import VKParser

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

class VKPlaylistBot:
    def __init__(self):
        self.parser = VKParser()
        self.application = Application.builder().token(BOT_TOKEN).build()
        
        self.application.add_handler(CommandHandler("start", self.start))
        self.application.add_handler(CommandHandler("help", self.help))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
    
    async def start(self, update: Update, context: CallbackContext) -> None:
        text = """
üéµ –ë–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤ –í–ö

–û—Ç–ø—Ä–∞–≤—å—Ç–µ:
‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞
‚Ä¢ –ò–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –∞—É–¥–∏–æ –í–ö

–ü—Ä–∏–º–µ—Ä: "Lil Nas X - Old Town Road"
        """
        await update.message.reply_text(text)
    
    async def help(self, update: Update, context: CallbackContext) -> None:
        text = """
üìù –§–æ—Ä–º–∞—Ç—ã —Å—Å—ã–ª–æ–∫:
‚Ä¢ https://vk.com/audio123456789_123456789
‚Ä¢ audio-123456789_123456789
‚Ä¢ audios123456789_123456789

üéØ –ü–æ–∫–∞–∑—ã–≤–∞—é –ø–ª–µ–π–ª–∏—Å—Ç—ã –æ—Ç 200+ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–π
        """
        await update.message.reply_text(text)
    
    async def handle_message(self, update: Update, context: CallbackContext) -> None:
        user_input = update.message.text.strip()
        
        msg = await update.message.reply_text("üîç –ü–æ–∏—Å–∫...")
        
        try:
            if any(x in user_input for x in ['vk.com', 'audio', 'http']):
                # –ü–æ–∏—Å–∫ –ø–æ —Å—Å—ã–ª–∫–µ
                audio_info = self.parser.extract_audio_info(user_input)
                if audio_info and 'owner_id' in audio_info:
                    await msg.edit_text("üîç –ò—â—É –ø–æ —Å—Å—ã–ª–∫–µ...")
                    results = self.parser.search_playlists_by_audio(
                        audio_info['owner_id'], 
                        audio_info['audio_id']
                    )
                else:
                    await msg.edit_text("‚ùå –ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ —Å—Å—ã–ª–∫–∞")
                    return
            else:
                # –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
                await msg.edit_text(f"üîç –ò—â—É '{user_input}'...")
                results = self.parser.search_by_query(user_input)
            
            if not results:
                await msg.edit_text("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤")
                return
            
            response = f"üéµ –ù–∞–π–¥–µ–Ω–æ: {len(results)}\n\n"
            
            for i, result in enumerate(results[:MAX_PLAYLISTS_TO_SHOW], 1):
                response += f"{i}. {result['title']}\n"
                response += f"   üîä {result['listens']} –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–π\n"
                response += f"   üîó {result['url']}\n\n"
            
            await msg.edit_text(response)
            
        except Exception as e:
            await msg.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞")

    def run(self):
        self.application.run_polling()

if __name__ == '__main__':
    bot = VKPlaylistBot()
    bot.run()
