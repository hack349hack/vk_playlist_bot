import logging
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Application, CommandHandler, MessageHandler, filters, 
    CallbackContext, ConversationHandler
)
from config import BOT_TOKEN, MAX_PLAYLISTS_TO_SHOW
from vk_parser import VKParser

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
SETTING_TOKEN, SEARCHING = range(2)

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class VKPlaylistBot:
    def __init__(self):
        self.application = Application.builder().token(BOT_TOKEN).build()
        
        # –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–∞—Ä—Å–µ—Ä–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.user_parsers = {}
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ConversationHandler
        conv_handler = ConversationHandler(
            entry_points=[CommandHandler('start', self.start)],
            states={
                SETTING_TOKEN: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.set_token)
                ],
                SEARCHING: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_search)
                ],
            },
            fallbacks=[CommandHandler('cancel', self.cancel)],
        )
        
        self.application.add_handler(conv_handler)
        self.application.add_handler(CommandHandler('help', self.help))
        self.application.add_handler(CommandHandler('token', self.token_command))
        self.application.add_handler(CommandHandler('status', self.status))
    
    def get_parser(self, user_id: int) -> VKParser:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–∞—Ä—Å–µ—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id not in self.user_parsers:
            self.user_parsers[user_id] = VKParser()
        return self.user_parsers[user_id]
    
    async def start(self, update: Update, context: CallbackContext) -> int:
        """–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞"""
        user_id = update.message.from_user.id
        parser = self.get_parser(user_id)
        
        if parser.token:
            await update.message.reply_text(
                "üîç –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –ø–æ–∏—Å–∫—É! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞ –∏–ª–∏ —Å—Å—ã–ª–∫—É –í–ö.\n\n"
                "–ö–æ–º–∞–Ω–¥—ã:\n"
                "/token - –∏–∑–º–µ–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω\n"
                "/status - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å\n"
                "/help - –ø–æ–º–æ—â—å",
                reply_markup=ReplyKeyboardRemove()
            )
            return SEARCHING
        else:
            await update.message.reply_text(
                "üîë –î–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –Ω—É–∂–µ–Ω —Ç–æ–∫–µ–Ω –í–ö–æ–Ω—Ç–∞–∫—Ç–µ.\n\n"
                "üìã –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω:\n"
                "1. –û—Ç–∫—Ä–æ–π—Ç–µ —Å—Å—ã–ª–∫—É –≤ –±—Ä–∞—É–∑–µ—Ä–µ:\n"
                "https://oauth.vk.com/authorize?client_id=6121396&display=page&redirect_uri=https://oauth.vk.com/blank.html&scope=audio&response_type=token&v=5.199\n\n"
                "2. –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –∏ —Ä–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø\n"
                "3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–æ–∫–µ–Ω –∏–∑ –∞–¥—Ä–µ—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏\n"
                "4. –ü—Ä–∏—à–ª–∏—Ç–µ –µ–≥–æ —Å—é–¥–∞\n\n"
                "‚ùì –¢–æ–∫–µ–Ω –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫: vk1.a.abc123...\n\n"
                "–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel",
                reply_markup=ReplyKeyboardRemove()
            )
            return SETTING_TOKEN
    
    async def set_token(self, update: Update, context: CallbackContext) -> int:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ–∫–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id = update.message.from_user.id
        token = update.message.text.strip()
        
        parser = self.get_parser(user_id)
        success, message = parser.set_token(token)
        
        await update.message.reply_text(message)
        
        if success:
            await update.message.reply_text(
                "üéâ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–∫–∞—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç—ã.\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ:\n"
                "‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 'Lil Nas X - Old Town Road')\n"
                "‚Ä¢ –ò–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –∞—É–¥–∏–æ –í–ö\n\n"
                "–ö–æ–º–∞–Ω–¥—ã:\n"
                "/token - –∏–∑–º–µ–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω\n"
                "/status - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å\n"
                "/help - –ø–æ–º–æ—â—å"
            )
            return SEARCHING
        else:
            await update.message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /cancel"
            )
            return SETTING_TOKEN
    
    async def handle_search(self, update: Update, context: CallbackContext) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
        user_id = update.message.from_user.id
        user_input = update.message.text.strip()
        
        parser = self.get_parser(user_id)
        
        if not parser.token:
            await update.message.reply_text(
                "‚ùå –¢–æ–∫–µ–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –í–≤–µ–¥–∏—Ç–µ /token –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"
            )
            return SETTING_TOKEN
        
        try:
            status_msg = await update.message.reply_text("üîç –ò—â—É –ø–ª–µ–π–ª–∏—Å—Ç—ã...")
            
            results = parser.search(user_input)
            
            if not results:
                await status_msg.edit_text(
                    "‚ùå –ü–ª–µ–π–ª–∏—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã\n\n"
                    "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                    "‚Ä¢ –¢—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω\n"
                    "‚Ä¢ –ù–µ—Ç –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤ —Å 200+ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è–º–∏\n"
                    "‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å"
                )
                return SEARCHING
            
            response = f"üéµ –ù–∞–π–¥–µ–Ω–æ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤: {len(results)}\n\n"
            
            for i, playlist in enumerate(results[:MAX_PLAYLISTS_TO_SHOW], 1):
                response += f"{i}. **{playlist['title']}**\n"
                response += f"   üîä {playlist['listens']} –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–π\n"
                response += f"   üîó {playlist['url']}\n\n"
            
            if len(results) > MAX_PLAYLISTS_TO_SHOW:
                response += f"ü§è –ü–æ–∫–∞–∑–∞–Ω–æ {MAX_PLAYLISTS_TO_SHOW} –∏–∑ {len(results)}"
            
            await status_msg.edit_text(response, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"Search error: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ")
        
        return SEARCHING
    
    async def token_command(self, update: Update, context: CallbackContext) -> int:
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–º–µ–Ω—ã —Ç–æ–∫–µ–Ω–∞"""
        await update.message.reply_text(
            "üîÑ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –í–ö–æ–Ω—Ç–∞–∫—Ç–µ:\n\n"
            "–°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è:\n"
            "https://oauth.vk.com/authorize?client_id=6121396&display=page&redirect_uri=https://oauth.vk.com/blank.html&scope=audio&response_type=token&v=5.199\n\n"
            "–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel"
        )
        return SETTING_TOKEN
    
    async def status(self, update: Update, context: CallbackContext):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞"""
        user_id = update.message.from_user.id
        parser = self.get_parser(user_id)
        
        if parser.token:
            success, message = parser.check_token(parser.token)
            await update.message.reply_text(message)
        else:
            await update.message.reply_text("‚ùå –¢–æ–∫–µ–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    async def help(self, update: Update, context: CallbackContext):
        """–°–ø—Ä–∞–≤–∫–∞"""
        help_text = """
üéµ –ë–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ

üìã –ö–æ–º–∞–Ω–¥—ã:
/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/token - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å/–∏–∑–º–µ–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω
/status - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å
/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

üîç –ü–æ–∏—Å–∫:
‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞: "Lil Nas X - Old Town Road"
‚Ä¢ –°—Å—ã–ª–∫–∞ –í–ö: https://vk.com/audio123456789_123456789
‚Ä¢ –°—Å—ã–ª–∫–∞ –í–ö: audio-123456789_123456789

üîê –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:
‚Ä¢ –¢–æ–∫–µ–Ω —Ö—Ä–∞–Ω–∏—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤–æ –≤—Ä–µ–º—è —Å–µ—Å—Å–∏–∏
‚Ä¢ –ù–∏–∫—Ç–æ –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–∞—à–µ–º—É —Ç–æ–∫–µ–Ω—É
‚Ä¢ –î–ª—è –≤—ã—Ö–æ–¥–∞ - –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞
        """
        await update.message.reply_text(help_text)
    
    async def cancel(self, update: Update, context: CallbackContext) -> int:
        """–û—Ç–º–µ–Ω–∞ –¥–∏–∞–ª–æ–≥–∞"""
        await update.message.reply_text(
            "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END
    
    def run(self):
        logger.info("Bot started with user token system")
        self.application.run_polling()

if __name__ == '__main__':
    bot = VKPlaylistBot()
    bot.run()
