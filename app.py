import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext
from config import BOT_TOKEN, MAX_PLAYLISTS_TO_SHOW
from vk_parser import VKParser

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class VKPlaylistBot:
    def __init__(self):
        self.parser = VKParser()
        self.application = Application.builder().token(BOT_TOKEN).build()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self.application.add_handler(CommandHandler("start", self.start))
        self.application.add_handler(CommandHandler("help", self.help))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
    
    async def start(self, update: Update, context: CallbackContext) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        welcome_text = """
üéµ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ.

–Ø –º–æ–≥—É –ø–æ–º–æ—á—å –Ω–∞–π—Ç–∏ –ø–ª–µ–π–ª–∏—Å—Ç—ã, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ç—Ä–µ–∫.

üìå –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
1. –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–°–∞—à–∞ –í—ã—à–µ, Postskriptum v.l.g. - –°–µ—Ä–¥—Ü–µ –ì–µ—Ä–æ—è")
2. –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ç—Ä–µ–∫ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ

–Ø –Ω–∞–π–¥—É –≤—Å–µ –ø–ª–µ–π–ª–∏—Å—Ç—ã —Å —ç—Ç–∏–º —Ç—Ä–µ–∫–æ–º, –≥–¥–µ –±–æ–ª—å—à–µ 200 –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–π, –∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä—É—é –∏—Ö –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏.
        """
        await update.message.reply_text(welcome_text)
    
    async def help(self, update: Update, context: CallbackContext) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
üîç –ü–æ–∏—Å–∫ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ

–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ:
‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞ –∏ –∞—Ä—Ç–∏—Å—Ç–∞
‚Ä¢ –ò–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –∞—É–¥–∏–æ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ

–ü—Ä–∏–º–µ—Ä—ã:
"–°–∞—à–∞ –í—ã—à–µ, Postskriptum v.l.g. - –°–µ—Ä–¥—Ü–µ –ì–µ—Ä–æ—è"
"https://vk.com/audio123456789_123456789"

üìä –ë–æ—Ç –ø–æ–∫–∞–∂–µ—Ç —Ç–æ–ª—å–∫–æ –ø–ª–µ–π–ª–∏—Å—Ç—ã —Å 200+ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–π
        """
        await update.message.reply_text(help_text)
    
    async def handle_message(self, update: Update, context: CallbackContext) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_input = update.message.text
        
        await update.message.reply_text("üîç –ò—â—É –ø–ª–µ–π–ª–∏—Å—Ç—ã... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.")
        
        try:
            results = []
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–≤–æ–¥ —Å—Å—ã–ª–∫–æ–π
            if 'vk.com' in user_input or 'audio' in user_input:
                audio_info = self.parser.extract_audio_info(user_input)
                if audio_info and 'owner_id' in audio_info:
                    results = self.parser.search_audio_in_playlists(
                        int(audio_info['owner_id']), 
                        int(audio_info['audio_id'])
                    )
                else:
                    await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –∞—É–¥–∏–æ")
                    return
            else:
                # –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
                results = self.parser.search_by_query_in_playlists(user_input)
            
            if not results:
                await update.message.reply_text("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤ —Å —ç—Ç–∏–º —Ç—Ä–µ–∫–æ–º (–∏–ª–∏ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–π –º–µ–Ω—å—à–µ 200)")
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            response = f"üéµ –ù–∞–π–¥–µ–Ω–æ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤: {len(results)}\n\n"
            
            for i, result in enumerate(results[:MAX_PLAYLISTS_TO_SHOW], 1):
                playlist = result['playlist']
                response += f"{i}. {playlist['title']}\n"
                response += f"   üë• –ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–π: {result['listens']}\n"
                response += f"   üîó {result['playlist_url']}\n\n"
            
            if len(results) > MAX_PLAYLISTS_TO_SHOW:
                response += f"ü§è –ü–æ–∫–∞–∑–∞–Ω–æ {MAX_PLAYLISTS_TO_SHOW} –∏–∑ {len(results)} –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤"
            
            await update.message.reply_text(response)
            
        except Exception as e:
            logger.error(f"Error processing message: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        self.application.run_polling()

if __name__ == '__main__':
    bot = VKPlaylistBot()
    bot.run()
