import logging
import asyncio
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext
from config import BOT_TOKEN, MAX_PLAYLISTS_TO_SHOW
from vk_parser import VKParser

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class VKPlaylistBot:
    def __init__(self):
        self.parser = VKParser()
        self.application = Application.builder().token(BOT_TOKEN).build()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self.application.add_handler(CommandHandler("start", self.start))
        self.application.add_handler(CommandHandler("help", self.help))
        self.application.add_handler(CommandHandler("debug", self.debug))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
    
    async def start(self, update: Update, context: CallbackContext) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        welcome_text = """
üéµ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ.

–Ø –º–æ–≥—É –ø–æ–º–æ—á—å –Ω–∞–π—Ç–∏ –ø–ª–µ–π–ª–∏—Å—Ç—ã –ø–æ –≤—Å–µ–º—É –í–ö–æ–Ω—Ç–∞–∫—Ç–µ, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ç—Ä–µ–∫.

üìå –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
1. –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–°–∞—à–∞ –í—ã—à–µ, Postskriptum v.l.g. - –°–µ—Ä–¥—Ü–µ –ì–µ—Ä–æ—è")
2. –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ç—Ä–µ–∫ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ

üîç –Ø –Ω–∞–π–¥—É –≤—Å–µ –ø–ª–µ–π–ª–∏—Å—Ç—ã —Å —ç—Ç–∏–º —Ç—Ä–µ–∫–æ–º (–≥–¥–µ –±–æ–ª—å—à–µ 200 –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–π) –∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä—É—é –∏—Ö –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏.

üí° –û—Ç–ª–∏—á–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è –º—É–∑—ã–∫–∏!
        """
        await update.message.reply_text(welcome_text)
    
    async def help(self, update: Update, context: CallbackContext) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
üîç –ü–æ–∏—Å–∫ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ

–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ:
‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞ –∏ –∞—Ä—Ç–∏—Å—Ç–∞
‚Ä¢ –ò–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –∞—É–¥–∏–æ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ

–ü—Ä–∏–º–µ—Ä—ã:
"–°–∞—à–∞ –í—ã—à–µ, Postskriptum v.l.g. - –°–µ—Ä–¥—Ü–µ –ì–µ—Ä–æ—è"
"https://vk.com/audio123456789_123456789"
"audio-123456789_123456789"

üìä –ë–æ—Ç –ø–æ–∫–∞–∂–µ—Ç —Ç–æ–ª—å–∫–æ –ø–ª–µ–π–ª–∏—Å—Ç—ã —Å 200+ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–π
üéØ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏
üë• –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–≤—Ç–æ—Ä–æ–≤ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤
        """
        await update.message.reply_text(help_text)

    async def debug(self, update: Update, context: CallbackContext) -> None:
        """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"""
        try:
            user_info = self.parser.get_current_user()
            debug_text = f"üîß –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n\n"
            debug_text += f"–¢–æ–∫–µ–Ω: {'‚úÖ' if self.parser.access_token else '‚ùå'}\n"
            debug_text += f"User ID: {self.parser.user_id}\n"
            debug_text += f"–ò–Ω—Ñ–æ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {user_info}\n"
            await update.message.reply_text(debug_text)
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏: {e}")
    
    async def handle_message(self, update: Update, context: CallbackContext) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_input = update.message.text.strip()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –±–æ—Ç –Ω–∞—á–∞–ª –ø–æ–∏—Å–∫
        search_message = await update.message.reply_text("üîç –ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 30 —Å–µ–∫—É–Ω–¥.")
        
        try:
            results = []
            search_type = ""
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–≤–æ–¥ —Å—Å—ã–ª–∫–æ–π
            if any(x in user_input for x in ['vk.com', 'audio', 'http']):
                search_type = "–ø–æ —Å—Å—ã–ª–∫–µ"
                audio_info = self.parser.extract_audio_info(user_input)
                
                if audio_info and 'owner_id' in audio_info:
                    await search_message.edit_text("üîç –ò—â—É –ø–ª–µ–π–ª–∏—Å—Ç—ã –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∞ –∞—É–¥–∏–æ...")
                    results = self.parser.search_playlists_global_by_audio(
                        audio_info['owner_id'], 
                        audio_info['audio_id']
                    )
                else:
                    await search_message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –∞—É–¥–∏–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç.")
                    return
            else:
                # –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
                search_type = "–ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"
                await search_message.edit_text(f"üîç –ò—â—É —Ç—Ä–µ–∫ '{user_input}'...")
                results = self.parser.search_playlists_global_by_query(user_input)
            
            if not results:
                await search_message.edit_text(
                    f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤ —Å —ç—Ç–∏–º —Ç—Ä–µ–∫–æ–º\n\n"
                    f"–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                    f"‚Ä¢ –¢—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ\n"
                    f"‚Ä¢ –ü–ª–µ–π–ª–∏—Å—Ç—ã —Å —Ç—Ä–µ–∫–æ–º –∏–º–µ—é—Ç –º–µ–Ω—å—à–µ {MIN_LISTENS} –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–π\n"
                    f"‚Ä¢ –¢—Ä–µ–∫ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø—É–±–ª–∏—á–Ω—ã–µ –ø–ª–µ–π–ª–∏—Å—Ç—ã"
                )
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            response = f"üéµ –ù–∞–π–¥–µ–Ω–æ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤: {len(results)}\n"
            response += f"üîç –ü–æ–∏—Å–∫ {search_type}\n\n"
            
            for i, result in enumerate(results[:MAX_PLAYLISTS_TO_SHOW], 1):
                playlist = result['playlist']
                owner_info = result.get('owner_info', {})
                
                response += f"**{i}. {playlist['title']}**\n"
                
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–ª–∞–¥–µ–ª—å—Ü–µ
                if owner_info:
                    if owner_info.get('is_group'):
                        response += f"   üë• –ì—Ä—É–ø–ø–∞: {owner_info['first_name']}\n"
                    else:
                        response += f"   üë§ –ê–≤—Ç–æ—Ä: {owner_info['first_name']} {owner_info['last_name']}\n"
                
                response += f"   üîä –ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–π: {result['listens']}\n"
                response += f"   üîó {result['playlist_url']}\n\n"
            
            if len(results) > MAX_PLAYLISTS_TO_SHOW:
                response += f"ü§è –ü–æ–∫–∞–∑–∞–Ω–æ {MAX_PLAYLISTS_TO_SHOW} –∏–∑ {len(results)} –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤\n\n"
            
            response += "üí° *–î–ª—è —Å–≤—è–∑–∏ —Å –∞–≤—Ç–æ—Ä–∞–º–∏ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏—Ö –ø—Ä–æ—Ñ–∏–ª–∏*"
            
            await search_message.edit_text(response, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"Error processing message: {e}")
            await search_message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞.")

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        self.application.run_polling()

if __name__ == '__main__':
    bot = VKPlaylistBot()
    bot.run()
