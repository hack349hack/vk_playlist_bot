import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext
from config import BOT_TOKEN, MAX_PLAYLISTS_TO_SHOW, MIN_LISTENS
from vk_parser import VKParser

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class VKPlaylistBot:
    def __init__(self):
        try:
            self.parser = VKParser()
            self.application = Application.builder().token(BOT_TOKEN).build()
            self.min_listens = MIN_LISTENS
            
            self.application.add_handler(CommandHandler("start", self.start))
            self.application.add_handler(CommandHandler("help", self.help))
            self.application.add_handler(CommandHandler("status", self.status))
            self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
            
            logger.info("‚úÖ Bot initialized successfully")
            
        except Exception as e:
            logger.error(f"‚ùå Bot initialization failed: {e}")
            raise
    
    async def start(self, update: Update, context: CallbackContext) -> None:
        welcome_text = f"""
üéµ –ë–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ:
‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞
‚Ä¢ –ò–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –∞—É–¥–∏–æ –í–ö

–Ø –Ω–∞–π–¥—É –ø–ª–µ–π–ª–∏—Å—Ç—ã —Å —ç—Ç–∏–º —Ç—Ä–µ–∫–æ–º (–æ—Ç {self.min_listens}+ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–π)
        """
        await update.message.reply_text(welcome_text)
    
    async def help(self, update: Update, context: CallbackContext) -> None:
        help_text = f"""
–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:
"–°–∞—à–∞ –í—ã—à–µ - –°–µ—Ä–¥—Ü–µ –ì–µ—Ä–æ—è"
"https://vk.com/audio123456789_123456789"
"audio-123456789_123456789"

–ü–æ–∫–∞–∑—ã–≤–∞—é –ø–ª–µ–π–ª–∏—Å—Ç—ã –æ—Ç {self.min_listens}+ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–π
        """
        await update.message.reply_text(help_text)

    async def status(self, update: Update, context: CallbackContext) -> None:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞"""
        try:
            await update.message.reply_text("‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∏—Å–ø—Ä–∞–≤–Ω–æ!")
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    async def handle_message(self, update: Update, context: CallbackContext) -> None:
        user_input = update.message.text.strip()
        
        search_message = await update.message.reply_text("üîç –ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫...")
        
        try:
            results = []
            
            if any(x in user_input for x in ['vk.com', 'audio', 'http']):
                audio_info = self.parser.extract_audio_info(user_input)
                
                if audio_info and 'owner_id' in audio_info:
                    await search_message.edit_text("üîç –ò—â—É –ø–ª–µ–π–ª–∏—Å—Ç—ã –ø–æ —Å—Å—ã–ª–∫–µ...")
                    results = self.parser.search_playlists_global_by_audio(
                        audio_info['owner_id'], 
                        audio_info['audio_id']
                    )
                else:
                    await search_message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å—Å—ã–ª–∫—É.")
                    return
            else:
                await search_message.edit_text(f"üîç –ò—â—É —Ç—Ä–µ–∫ '{user_input}'...")
                results = self.parser.search_playlists_global_by_query(user_input)
            
            if not results:
                await search_message.edit_text(
                    f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤\n"
                    f"‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞\n"
                    f"‚Ä¢ –ò–ª–∏ –ø–ª–µ–π–ª–∏—Å—Ç—ã –∏–º–µ—é—Ç < {self.min_listens} –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–π"
                )
                return
            
            response = f"üéµ –ù–∞–π–¥–µ–Ω–æ: {len(results)} –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤\n\n"
            
            for i, result in enumerate(results[:MAX_PLAYLISTS_TO_SHOW], 1):
                playlist = result['playlist']
                owner_info = result.get('owner_info', {})
                
                response += f"{i}. **{playlist['title']}**\n"
                response += f"   üë§ {owner_info.get('name', '–ê–≤—Ç–æ—Ä')}\n"
                response += f"   üîä {result['listens']} –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–π\n"
                response += f"   üîó {result['playlist_url']}\n\n"
            
            if len(results) > MAX_PLAYLISTS_TO_SHOW:
                response += f"–ü–æ–∫–∞–∑–∞–Ω–æ {MAX_PLAYLISTS_TO_SHOW} –∏–∑ {len(results)}\n"
            
            await search_message.edit_text(response, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"Error: {e}")
            await search_message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    def run(self):
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        self.application.run_polling()

if __name__ == '__main__':
    try:
        bot = VKPlaylistBot()
        bot.run()
    except Exception as e:
        logger.error(f"Failed to start: {e}")
